* transclusion from javascript

  - resource resolvers
  - content resolvers
  
* test environment setup
  
** browser testing

   #+BEGIN_SRC sh :eval never
   yarn global add shadow-cljs
   yarn add react create-react-class react-dom
   shadow-cljs watch browser-sample
   #+END_SRC

   open the browser to http://localhost:8020/ to load the tests

** node library testing

   #+BEGIN_SRC sh :eval never
   shadow-cljs watch node-test
   #+END_SRC

   this will watch + recompile the =node-test= profile, which builds a
   file that runs nodejs examples. To run it in a watch loop I am
   using [[https://github.com/joh/when-changed][when-changed]]. On Windows, it can be run from a MINGW shell
   with

   #+BEGIN_SRC sh :eval never
   when-changed build/test.js $(which node) build/test.js
   #+END_SRC

   note that because the resource loaders are async, the process is
   made to exit using an atom to count the remaining tests.
   
* building for node.js

  #+BEGIN_SRC sh :eval never
  shadow-cljs release lib-sample
  #+END_SRC

** example usage

   #+BEGIN_SRC javascript :eval never :tangle test.js :padline no
     let xcl = require("./build/transclusion.js")

     // corresponds to corpus.cljs
     const FileCache = {
         "xcl-test-3-a.org": "content of A!\n\naye aye aye",
         "xcl-test-3-b.org": "* I am B and I include A\n\n** {{{transclude(xcl:xcl-test-3-a.org)}}}",
         "xcl-test-3-c.org": "* I am C and I include B\n\n*{{{transclude(xcl:xcl-test-3-b.org)}}}",
     }

     function list_files() {
         return Object.keys(FileCache)
     }
     function load_content(filename) {
         return FileCache[filename]
     }

     console.log("=== INPUT ===")
     console.log(load_content("xcl-test-3-c.org"))
     console.log("=== OUTPUT ===")
     console.log(xcl.render(
         list_files,
         load_content,
         load_content("xcl-test-3-c.org")))
   #+END_SRC

* test files

  - alice.epub :: http://www.gutenberg.org/ebooks/11
  - tracemonkey.pdf :: https://github.com/mozilla/pdf.js/blob/master/test/pdfs/tracemonkey.pdf
